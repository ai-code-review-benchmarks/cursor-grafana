{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The Grafana backend exposes an HTTP API, the same API is used by the frontend to do\neverything from saving dashboards, creating users and updating data sources.",
    "title": "Grafana HTTP API.",
    "contact": {
      "name": "Grafana Labs",
      "url": "https://grafana.com",
      "email": "hello@grafana.com"
    },
    "version": "0.0.1"
  },
  "basePath": "/api",
  "paths": {
    "/access-control/assignments/search": {
      "post": {
        "description": "Returns the result of the search through access-control role assignments.\n\nYou need to have a permission with action `teams.roles:read` on scope `teams:*`\nand a permission with action `users.roles:read` on scope `users:*`.",
        "tags": [
          "enterprise"
        ],
        "summary": "Debug permissions.",
        "operationId": "searchResult",
        "responses": {
          "200": {
            "$ref": "#/responses/searchResultResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/access-control/roles": {
      "get": {
        "description": "Gets all existing roles. The response contains all global and organization local roles, for the organization which user is signed in.\n\nYou need to have a permission with action `roles:read` and scope `roles:*`.\n\nThe `delegatable` flag reduces the set of roles to only those for which the signed-in user has permissions to assign.",
        "tags": [
          "access_control",
          "enterprise"
        ],
        "summary": "Get all roles.",
        "operationId": "listRoles",
        "parameters": [
          {
            "type": "boolean",
            "name": "delegatable",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "includeHidden",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listRolesResponse"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "post": {
        "description": "Creates a new custom role and maps given permissions to that role. Note that roles with the same prefix as Fixed Roles can’t be created.\n\nYou need to have a permission with action `roles:write` and scope `permissions:type:delegate`. `permissions:type:delegate` scope ensures that users can only create custom roles with the same, or a subset of permissions which the user has.\nFor example, if a user does not have required permissions for creating users, they won’t be able to create a custom role which allows to do that. This is done to prevent escalation of privileges.",
        "tags": [
          "access_control",
          "enterprise"
        ],
        "summary": "Create a new custom role.",
        "operationId": "createRole",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/createRoleResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/access-control/roles/{roleUID}": {
      "get": {
        "description": "Get a role for the given UID.\n\nYou need to have a permission with action `roles:read` and scope `roles:*`.",
        "tags": [
          "access_control",
          "enterprise"
        ],
        "summary": "Get a role.",
        "operationId": "getRole",
        "parameters": [
          {
            "type": "string",
            "name": "roleUID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getRoleResponse"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "put": {
        "description": "You need to have a permission with action `roles:write` and scope `permissions:type:delegate`. `permissions:type:delegate` scope ensures that users can only create custom roles with the same, or a subset of permissions which the user has.",
        "tags": [
          "access_control",
          "enterprise"
        ],
        "summary": "Update a custom role.",
        "operationId": "updateRole",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {}
          },
          {
            "type": "string",
            "name": "roleUID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getRoleResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "delete": {
        "description": "Delete a role with the given UID, and it’s permissions. If the role is assigned to a built-in role, the deletion operation will fail, unless force query param is set to true, and in that case all assignments will also be deleted.\n\nYou need to have a permission with action `roles:delete` and scope `permissions:type:delegate`. `permissions:type:delegate` scope ensures that users can only delete a custom role with the same, or a subset of permissions which the user has. For example, if a user does not have required permissions for creating users, they won’t be able to delete a custom role which allows to do that.",
        "tags": [
          "access_control",
          "enterprise"
        ],
        "summary": "Delete a custom role.",
        "operationId": "deleteRole",
        "parameters": [
          {
            "type": "boolean",
            "name": "force",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "global",
            "in": "query"
          },
          {
            "type": "string",
            "name": "roleUID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/okResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/access-control/roles/{roleUID}/assignments": {
      "get": {
        "description": "Get role assignments for the role with the given UID.\n\nYou need to have a permission with action `teams.roles:list` and scope `teams:id:*` and `users.roles:list` and scope `users:id:*`.",
        "tags": [
          "access_control",
          "enterprise"
        ],
        "summary": "Get role assignments.",
        "operationId": "getRoleAssignments",
        "parameters": [
          {
            "type": "string",
            "name": "roleUID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getRoleAssignmentsResponse"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "put": {
        "description": "Set role assignments for the role with the given UID.\n\nYou need to have a permission with action `teams.roles:add` and `teams.roles:remove` and scope `permissions:type:delegate`, and `users.roles:add` and `users.roles:remove` and scope `permissions:type:delegate`.",
        "tags": [
          "access_control",
          "enterprise"
        ],
        "summary": "Set role assignments.",
        "operationId": "setRoleAssignments",
        "parameters": [
          {
            "type": "string",
            "name": "roleUID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/setRoleAssignmentsResponse"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/access-control/status": {
      "get": {
        "description": "Returns an indicator to check if fine-grained access control is enabled or not.\n\nYou need to have a permission with action `status:accesscontrol` and scope `services:accesscontrol`.",
        "tags": [
          "access_control",
          "enterprise"
        ],
        "summary": "Get status.",
        "operationId": "getAccessControlStatus",
        "responses": {
          "200": {
            "$ref": "#/responses/getAccessControlStatusResponse"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/access-control/teams/roles/search": {
      "post": {
        "description": "Lists the roles that have been directly assigned to the given teams.\n\nYou need to have a permission with action `teams.roles:read` and scope `teams:id:*`.",
        "tags": [
          "access_control",
          "enterprise"
        ],
        "summary": "List roles assigned to multiple teams.",
        "operationId": "listTeamsRoles",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listTeamsRolesResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/access-control/teams/{teamId}/roles": {
      "get": {
        "description": "You need to have a permission with action `teams.roles:read` and scope `teams:id:\u003cteam ID\u003e`.",
        "tags": [
          "access_control",
          "enterprise"
        ],
        "summary": "Get team roles.",
        "operationId": "listTeamRoles",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "teamId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/okResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "put": {
        "description": "You need to have a permission with action `teams.roles:add` and `teams.roles:remove` and scope `permissions:type:delegate` for each.",
        "tags": [
          "access_control",
          "enterprise"
        ],
        "summary": "Update team role.",
        "operationId": "setTeamRoles",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "teamId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/okResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "post": {
        "description": "You need to have a permission with action `teams.roles:add` and scope `permissions:type:delegate`.",
        "tags": [
          "access_control",
          "enterprise"
        ],
        "summary": "Add team role.",
        "operationId": "addTeamRole",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {}
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "teamId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/okResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/access-control/teams/{teamId}/roles/{roleUID}": {
      "delete": {
        "description": "You need to have a permission with action `teams.roles:remove` and scope `permissions:type:delegate`.",
        "tags": [
          "access_control",
          "enterprise"
        ],
        "summary": "Remove team role.",
        "operationId": "removeTeamRole",
        "parameters": [
          {
            "type": "string",
            "name": "roleUID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "teamId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/okResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/access-control/users/roles/search": {
      "post": {
        "description": "Lists the roles that have been directly assigned to the given users. The list does not include built-in roles (Viewer, Editor, Admin or Grafana Admin), and it does not include roles that have been inherited from a team.\n\nYou need to have a permission with action `users.roles:read` and scope `users:id:*`.",
        "tags": [
          "access_control",
          "enterprise"
        ],
        "summary": "List roles assigned to multiple users.",
        "operationId": "listUsersRoles",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listUsersRolesResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/access-control/users/{userId}/roles": {
      "get": {
        "description": "Lists the roles that have been directly assigned to a given user. The list does not include built-in roles (Viewer, Editor, Admin or Grafana Admin), and it does not include roles that have been inherited from a team.\n\nYou need to have a permission with action `users.roles:read` and scope `users:id:\u003cuser ID\u003e`.",
        "tags": [
          "access_control",
          "enterprise"
        ],
        "summary": "List roles assigned to a user.",
        "operationId": "listUserRoles",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getAllRolesResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "put": {
        "description": "Update the user’s role assignments to match the provided set of UIDs. This will remove any assigned roles that aren’t in the request and add roles that are in the set but are not already assigned to the user.\nIf you want to add or remove a single role, consider using Add a user role assignment or Remove a user role assignment instead.\n\nYou need to have a permission with action `users.roles:add` and `users.roles:remove` and scope `permissions:type:delegate` for each. `permissions:type:delegate`  scope ensures that users can only assign or unassign roles which have same, or a subset of permissions which the user has. For example, if a user does not have required permissions for creating users, they won’t be able to assign or unassign a role which will allow to do that. This is done to prevent escalation of privileges.",
        "tags": [
          "access_control",
          "enterprise"
        ],
        "summary": "Set user role assignments.",
        "operationId": "setUserRoles",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {}
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/okResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "post": {
        "description": "Assign a role to a specific user. For bulk updates consider Set user role assignments.\n\nYou need to have a permission with action `users.roles:add` and scope `permissions:type:delegate`. `permissions:type:delegate` scope ensures that users can only assign roles which have same, or a subset of permissions which the user has. For example, if a user does not have required permissions for creating users, they won’t be able to assign a role which will allow to do that. This is done to prevent escalation of privileges.",
        "tags": [
          "access_control",
          "enterprise"
        ],
        "summary": "Add a user role assignment.",
        "operationId": "addUserRole",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {}
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/okResponse"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/access-control/users/{userId}/roles/{roleUID}": {
      "delete": {
        "description": "Revoke a role from a user. For bulk updates consider Set user role assignments.\n\nYou need to have a permission with action `users.roles:remove` and scope `permissions:type:delegate`. `permissions:type:delegate` scope ensures that users can only unassign roles which have same, or a subset of permissions which the user has. For example, if a user does not have required permissions for creating users, they won’t be able to unassign a role which will allow to do that. This is done to prevent escalation of privileges.",
        "tags": [
          "access_control",
          "enterprise"
        ],
        "summary": "Remove a user role assignment.",
        "operationId": "removeUserRole",
        "parameters": [
          {
            "type": "boolean",
            "description": "A flag indicating if the assignment is global or not. If set to false, the default org ID of the authenticated user will be used from the request to remove assignment.",
            "name": "global",
            "in": "query"
          },
          {
            "type": "string",
            "name": "roleUID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/okResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/admin/ldap-sync-status": {
      "get": {
        "description": "You need to have a permission with action `ldap.status:read`.",
        "tags": [
          "ldap_debug",
          "enterprise"
        ],
        "summary": "Returns the current state of the LDAP background sync integration.",
        "operationId": "getSyncStatus",
        "responses": {
          "200": {
            "$ref": "#/responses/getSyncStatusResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/admin/provisioning/access-control/reload": {
      "post": {
        "tags": [
          "access_control_provisioning",
          "enterprise"
        ],
        "summary": "You need to have a permission with action `provisioning:reload` with scope `provisioners:accesscontrol`.",
        "operationId": "adminProvisioningReloadAccessControl",
        "responses": {
          "202": {
            "$ref": "#/responses/acceptedResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          }
        }
      }
    },
    "/datasources/uid/{uid}/lbac/teams": {
      "get": {
        "tags": [
          "enterprise"
        ],
        "summary": "Retrieves LBAC rules for a team.",
        "operationId": "getTeamLBACRulesApi",
        "parameters": [
          {
            "type": "string",
            "name": "uid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/okResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "enterprise"
        ],
        "summary": "Updates LBAC rules for a team.",
        "operationId": "updateTeamLBACRulesApi",
        "parameters": [
          {
            "type": "string",
            "name": "uid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/okResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/datasources/{dataSourceUID}/cache": {
      "get": {
        "description": "get cache config for a single data source",
        "tags": [
          "enterprise"
        ],
        "operationId": "getDataSourceCacheConfig",
        "parameters": [
          {
            "type": "string",
            "name": "dataSourceUID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "CacheConfigResponse",
            "schema": {
              "$ref": "#/definitions/CacheConfigResponse"
            }
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "post": {
        "description": "set cache config for a single data source",
        "tags": [
          "enterprise"
        ],
        "operationId": "setDataSourceCacheConfig",
        "parameters": [
          {
            "type": "string",
            "name": "dataSourceUID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "CacheConfigResponse",
            "schema": {
              "$ref": "#/definitions/CacheConfigResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/datasources/{dataSourceUID}/cache/clean": {
      "post": {
        "description": "clean cache for a single data source",
        "tags": [
          "enterprise"
        ],
        "operationId": "cleanDataSourceCache",
        "parameters": [
          {
            "type": "string",
            "name": "dataSourceUID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "CacheConfigResponse",
            "schema": {
              "$ref": "#/definitions/CacheConfigResponse"
            }
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/datasources/{dataSourceUID}/cache/disable": {
      "post": {
        "description": "disable cache for a single data source",
        "tags": [
          "enterprise"
        ],
        "operationId": "disableDataSourceCache",
        "parameters": [
          {
            "type": "string",
            "name": "dataSourceUID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "CacheConfigResponse",
            "schema": {
              "$ref": "#/definitions/CacheConfigResponse"
            }
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/datasources/{dataSourceUID}/cache/enable": {
      "post": {
        "description": "enable cache for a single data source",
        "tags": [
          "enterprise"
        ],
        "operationId": "enableDataSourceCache",
        "parameters": [
          {
            "type": "string",
            "name": "dataSourceUID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "CacheConfigResponse",
            "schema": {
              "$ref": "#/definitions/CacheConfigResponse"
            }
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/licensing/check": {
      "get": {
        "tags": [
          "licensing",
          "enterprise"
        ],
        "summary": "Check license availability.",
        "operationId": "getStatus",
        "responses": {
          "200": {
            "$ref": "#/responses/getStatusResponse"
          }
        }
      }
    },
    "/licensing/custom-permissions": {
      "get": {
        "description": "You need to have a permission with action `licensing.reports:read`.",
        "tags": [
          "licensing",
          "enterprise"
        ],
        "summary": "Get custom permissions report.",
        "operationId": "getCustomPermissionsReport",
        "deprecated": true,
        "responses": {
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/licensing/custom-permissions-csv": {
      "get": {
        "description": "You need to have a permission with action `licensing.reports:read`.",
        "produces": [
          "text/csv"
        ],
        "tags": [
          "licensing",
          "enterprise"
        ],
        "summary": "Get custom permissions report in CSV format.",
        "operationId": "getCustomPermissionsCSV",
        "deprecated": true,
        "responses": {
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/licensing/refresh-stats": {
      "get": {
        "description": "You need to have a permission with action `licensing:read`.",
        "tags": [
          "licensing",
          "enterprise"
        ],
        "summary": "Refresh license stats.",
        "operationId": "refreshLicenseStats",
        "responses": {
          "200": {
            "$ref": "#/responses/refreshLicenseStatsResponse"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/licensing/token": {
      "get": {
        "description": "You need to have a permission with action `licensing:read`.",
        "tags": [
          "licensing",
          "enterprise"
        ],
        "summary": "Get license token.",
        "operationId": "getLicenseToken",
        "responses": {
          "200": {
            "$ref": "#/responses/getLicenseTokenResponse"
          }
        }
      },
      "post": {
        "description": "You need to have a permission with action `licensing:update`.",
        "tags": [
          "licensing",
          "enterprise"
        ],
        "summary": "Create license token.",
        "operationId": "postLicenseToken",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getLicenseTokenResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          }
        }
      },
      "delete": {
        "description": "Removes the license stored in the Grafana database. Available in Grafana Enterprise v7.4+.\n\nYou need to have a permission with action `licensing:delete`.",
        "tags": [
          "licensing",
          "enterprise"
        ],
        "summary": "Remove license from database.",
        "operationId": "deleteLicenseToken",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/acceptedResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntityError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/licensing/token/renew": {
      "post": {
        "description": "Manually ask license issuer for a new token. Available in Grafana Enterprise v7.4+.\n\nYou need to have a permission with action `licensing:update`.",
        "tags": [
          "licensing",
          "enterprise"
        ],
        "summary": "Manually force license refresh.",
        "operationId": "postRenewLicenseToken",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/postRenewLicenseTokenResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          }
        }
      }
    },
    "/logout/saml": {
      "get": {
        "tags": [
          "saml",
          "enterprise"
        ],
        "summary": "GetLogout initiates single logout process.",
        "operationId": "getSAMLLogout",
        "responses": {
          "302": {
            "description": ""
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/recording-rules": {
      "get": {
        "tags": [
          "recording_rules",
          "enterprise"
        ],
        "summary": "Lists all rules in the database: active or deleted.",
        "operationId": "listRecordingRules",
        "responses": {
          "200": {
            "$ref": "#/responses/listRecordingRulesResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "recording_rules",
          "enterprise"
        ],
        "summary": "Update the active status of a rule.",
        "operationId": "updateRecordingRule",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/recordingRuleResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "recording_rules",
          "enterprise"
        ],
        "summary": "Create a recording rule that is then registered and started.",
        "operationId": "createRecordingRule",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/recordingRuleResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/recording-rules/test": {
      "post": {
        "tags": [
          "recording_rules",
          "enterprise"
        ],
        "summary": "Test a recording rule.",
        "operationId": "testCreateRecordingRule",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/okResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntityError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/recording-rules/writer": {
      "get": {
        "tags": [
          "recording_rules",
          "enterprise"
        ],
        "summary": "Return the prometheus remote write target.",
        "operationId": "getRecordingRuleWriteTarget",
        "responses": {
          "200": {
            "$ref": "#/responses/recordingRuleWriteTargetResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "post": {
        "description": "It returns a 422 if there is not an existing prometheus data source configured.",
        "tags": [
          "recording_rules",
          "enterprise"
        ],
        "summary": "Create a remote write target.",
        "operationId": "createRecordingRuleWriteTarget",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/recordingRuleWriteTargetResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntityError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "recording_rules",
          "enterprise"
        ],
        "summary": "Delete the remote write target.",
        "operationId": "deleteRecordingRuleWriteTarget",
        "responses": {
          "200": {
            "$ref": "#/responses/okResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/recording-rules/{recordingRuleID}": {
      "delete": {
        "tags": [
          "recording_rules",
          "enterprise"
        ],
        "summary": "Delete removes the rule from the registry and stops it.",
        "operationId": "deleteRecordingRule",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "recordingRuleID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/okResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/reports": {
      "get": {
        "description": "Available to org admins only and with a valid or expired license.\n\nYou need to have a permission with action `reports:read` with scope `reports:*`.",
        "tags": [
          "reports",
          "enterprise"
        ],
        "summary": "List reports.",
        "operationId": "getReports",
        "responses": {
          "200": {
            "$ref": "#/responses/getReportsResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "post": {
        "description": "Available to org admins only and with a valid license.\n\nYou need to have a permission with action `reports.admin:create`.",
        "tags": [
          "reports",
          "enterprise"
        ],
        "summary": "Create a report.",
        "operationId": "createReport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/createReportResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/reports/email": {
      "post": {
        "description": "Generate and send a report. This API waits for the report to be generated before returning. We recommend that you set the client’s timeout to at least 60 seconds. Available to org admins only and with a valid license.\n\nOnly available in Grafana Enterprise v7.0+.\nThis API endpoint is experimental and may be deprecated in a future release. On deprecation, a migration strategy will be provided and the endpoint will remain functional until the next major release of Grafana.\n\nYou need to have a permission with action `reports:send`.",
        "tags": [
          "reports",
          "enterprise"
        ],
        "summary": "Send a report.",
        "operationId": "sendReport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/okResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/reports/images/:image": {
      "get": {
        "description": "Available to org admins only and with a valid or expired license.\n\nYou need to have a permission with action `reports.settings:read`.",
        "tags": [
          "reports",
          "enterprise"
        ],
        "summary": "Get custom branding report image.",
        "operationId": "getSettingsImage",
        "responses": {
          "200": {
            "$ref": "#/responses/contentResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/reports/render/csvs": {
      "get": {
        "description": "Available to all users and with a valid license.",
        "produces": [
          "application/zip"
        ],
        "tags": [
          "reports",
          "enterprise"
        ],
        "summary": "Download a CSV report.",
        "operationId": "renderReportCSVs",
        "parameters": [
          {
            "type": "string",
            "name": "dashboards",
            "in": "query"
          },
          {
            "type": "string",
            "name": "title",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/contentResponse"
          },
          "204": {
            "$ref": "#/responses/noContentResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/reports/render/pdfs": {
      "get": {
        "description": "Available to all users and with a valid license.",
        "produces": [
          "application/pdf"
        ],
        "tags": [
          "reports",
          "enterprise"
        ],
        "summary": "Render report for multiple dashboards.",
        "operationId": "renderReportPDFs",
        "parameters": [
          {
            "type": "string",
            "name": "dashboards",
            "in": "query"
          },
          {
            "type": "string",
            "name": "orientation",
            "in": "query"
          },
          {
            "type": "string",
            "name": "layout",
            "in": "query"
          },
          {
            "type": "string",
            "name": "title",
            "in": "query"
          },
          {
            "type": "string",
            "name": "scaleFactor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "includeTables",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/contentResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/reports/settings": {
      "get": {
        "description": "Available to org admins only and with a valid or expired license.\n\nYou need to have a permission with action `reports.settings:read`x.",
        "tags": [
          "reports",
          "enterprise"
        ],
        "summary": "Get report settings.",
        "operationId": "getReportSettings",
        "responses": {
          "200": {
            "$ref": "#/responses/getReportSettingsResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "post": {
        "description": "Available to org admins only and with a valid or expired license.\n\nYou need to have a permission with action `reports.settings:write`xx.",
        "tags": [
          "reports",
          "enterprise"
        ],
        "summary": "Save settings.",
        "operationId": "saveReportSettings",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/okResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/reports/test-email": {
      "post": {
        "description": "Available to org admins only and with a valid license.\n\nYou need to have a permission with action `reports:send`.",
        "tags": [
          "reports",
          "enterprise"
        ],
        "summary": "Send test report via email.",
        "operationId": "sendTestEmail",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/okResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/reports/{id}": {
      "get": {
        "description": "Available to org admins only and with a valid or expired license.\n\nYou need to have a permission with action `reports:read` with scope `reports:id:\u003creport ID\u003e`.",
        "tags": [
          "reports",
          "enterprise"
        ],
        "summary": "Get a report.",
        "operationId": "getReport",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getReportResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "put": {
        "description": "Available to org admins only and with a valid or expired license.\n\nYou need to have a permission with action `reports.admin:write` with scope `reports:id:\u003creport ID\u003e`.",
        "tags": [
          "reports",
          "enterprise"
        ],
        "summary": "Update a report.",
        "operationId": "updateReport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {}
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/okResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "delete": {
        "description": "Available to org admins only and with a valid or expired license.\n\nYou need to have a permission with action `reports.delete` with scope `reports:id:\u003creport ID\u003e`.",
        "tags": [
          "reports",
          "enterprise"
        ],
        "summary": "Delete a report.",
        "operationId": "deleteReport",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/okResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/saml/acs": {
      "post": {
        "tags": [
          "saml",
          "enterprise"
        ],
        "summary": "It performs Assertion Consumer Service (ACS).",
        "operationId": "postACS",
        "parameters": [
          {
            "type": "string",
            "name": "RelayState",
            "in": "query"
          }
        ],
        "responses": {
          "302": {
            "description": ""
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/saml/metadata": {
      "get": {
        "produces": [
          "application/xml;application/samlmetadata+xml"
        ],
        "tags": [
          "saml",
          "enterprise"
        ],
        "summary": "It exposes the SP (Grafana's) metadata for the IdP's consumption.",
        "operationId": "getMetadata",
        "responses": {
          "200": {
            "$ref": "#/responses/contentResponse"
          }
        }
      }
    },
    "/saml/slo": {
      "get": {
        "description": "There might be two possible requests:\n1. Logout response (callback) when Grafana initiates single logout and IdP returns response to logout request.\n2. Logout request when another SP initiates single logout and IdP sends logout request to the Grafana,\nor in case of IdP-initiated logout.",
        "tags": [
          "saml",
          "enterprise"
        ],
        "summary": "It performs Single Logout (SLO) callback.",
        "operationId": "getSLO",
        "responses": {
          "302": {
            "description": ""
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "post": {
        "description": "There might be two possible requests:\n1. Logout response (callback) when Grafana initiates single logout and IdP returns response to logout request.\n2. Logout request when another SP initiates single logout and IdP sends logout request to the Grafana,\nor in case of IdP-initiated logout.",
        "tags": [
          "saml",
          "enterprise"
        ],
        "summary": "It performs Single Logout (SLO) callback.",
        "operationId": "postSLO",
        "parameters": [
          {
            "type": "string",
            "name": "SAMLRequest",
            "in": "query"
          },
          {
            "type": "string",
            "name": "SAMLResponse",
            "in": "query"
          }
        ],
        "responses": {
          "302": {
            "description": ""
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/teams/{teamId}/groups": {
      "get": {
        "tags": [
          "sync_team_groups",
          "enterprise"
        ],
        "summary": "Get External Groups.",
        "operationId": "getTeamGroupsApi",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "teamId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getTeamGroupsApiResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "sync_team_groups",
          "enterprise"
        ],
        "summary": "Add External Group.",
        "operationId": "addTeamGroupApi",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {}
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "teamId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/okResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "sync_team_groups",
          "enterprise"
        ],
        "summary": "Remove External Group.",
        "operationId": "removeTeamGroupApiQuery",
        "parameters": [
          {
            "type": "string",
            "name": "groupId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "teamId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/okResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    }
  },
  "definitions": {
    "AddAPIKeyCommand": {},
    "Annotation": {},
    "CacheConfig": {
      "description": "Config defines the internal representation of a cache configuration, including fields not set by the API caller"
    },
    "CacheConfigResponse": {},
    "CacheConfigSetter": {
      "description": "ConfigSetter defines the cache parameters that users can configure per datasource\nThis is only intended to be consumed by the SetCache HTTP Handler"
    },
    "CookieType": {},
    "Correlation": {
      "description": "Correlation is the model for correlations definitions"
    },
    "CorrelationConfig": {},
    "CorrelationConfigUpdateDTO": {},
    "CreateCorrelationCommand": {
      "description": "CreateCorrelationCommand is the command for creating a correlation"
    },
    "CreateCorrelationResponseBody": {
      "description": "CreateCorrelationResponse is the response struct for CreateCorrelationCommand"
    },
    "CreateDashboardSnapshotCommand": {},
    "CreateLibraryElementCommand": {
      "description": "CreateLibraryElementCommand is the command for adding a LibraryElement"
    },
    "CreateOrUpdateReportConfig": {},
    "CreateQueryInQueryHistoryCommand": {
      "description": "CreateQueryInQueryHistoryCommand is the command for adding query history"
    },
    "CreateServiceAccountForm": {},
    "DashboardACLUpdateItem": {},
    "DataResponse": {
      "description": "A map of RefIDs (unique query identifiers) to this type makes up the Responses property of a QueryDataResponse.\nThe Error property is used to allow for partial success responses from the containing QueryDataResponse.",
      "title": "DataResponse contains the results from a DataQuery."
    },
    "DeleteCorrelationResponseBody": {},
    "DsPermissionType": {
      "description": "Datasource permission\nDescription:\n`0` - No Access\n`1` - Query\n`2` - Edit\nEnum: 0,1,2"
    },
    "Field": {
      "description": "A Field is essentially a slice of various types with extra properties and methods.\nSee NewField() for supported types.\n\nThe slice data in the Field is a not exported, so methods on the Field are used to to manipulate its data.",
      "title": "Field represents a typed column of data within a Frame."
    },
    "Frame": {
      "description": "Each Field is well typed by its FieldType and supports optional Labels.\n\nA Frame is a general data container for Grafana. A Frame can be table data\nor time series data depending on its content and field types.",
      "title": "Frame is a columnar data structure where each column is a Field."
    },
    "FrameLabels": {
      "description": "Labels are used to add metadata to an object.  The JSON will always be sorted keys"
    },
    "FrameMeta": {
      "description": "https://github.com/grafana/grafana/blob/master/packages/grafana-data/src/types/data.ts#L11\nNOTE -- in javascript this can accept any `[key: string]: any;` however\nthis interface only exposes the values we want to be exposed",
      "title": "FrameMeta matches:"
    },
    "Frames": {
      "description": "It is the main data container within a backend.DataResponse.\nThere should be no `nil` entries in the Frames slice (making them pointers was a mistake).",
      "title": "Frames is a slice of Frame pointers."
    },
    "GetHomeDashboardResponse": {
      "title": "Get home dashboard response."
    },
    "MetricRequest": {},
    "NewApiKeyResult": {},
    "ObjectMatcher": {
      "title": "ObjectMatcher is a matcher that can be used to filter alerts."
    },
    "ObjectMatchers": {
      "title": "ObjectMatchers is a list of matchers that can be used to filter alerts."
    },
    "PatchPrefsCmd": {},
    "PatchQueryCommentInQueryHistoryCommand": {
      "description": "PatchQueryCommentInQueryHistoryCommand is the command for updating comment for query in query history"
    },
    "Preferences": {
      "description": "Spec defines user, team or org Grafana preferences"
    },
    "Report": {
      "description": "ConfigDTO is model representation in transfer"
    },
    "ReportBrandingOptions": {},
    "ReportDashboard": {},
    "ReportDashboardID": {},
    "ReportEmail": {},
    "ReportOptions": {},
    "ReportSchedule": {},
    "ReportSettings": {},
    "ReportTimeRange": {},
    "Responses": {
      "description": "The QueryData method the QueryDataHandler method will set the RefId\nproperty on the DataResponses' frames based on these RefIDs.",
      "title": "Responses is a map of RefIDs (Unique Query ID) to DataResponses."
    },
    "RoleDTO": {},
    "ServiceAccountProfileDTO": {},
    "SuccessResponseBody": {},
    "TokenDTO": {},
    "UpdateCorrelationCommand": {
      "description": "UpdateCorrelationCommand is the command for updating a correlation"
    },
    "UpdateCorrelationResponseBody": {},
    "UpdateDashboardACLCommand": {},
    "UpdatePrefsCmd": {},
    "UpdateServiceAccountForm": {},
    "publicError": {
      "description": "PublicError is derived from Error and only contains information\navailable to the end user."
    }
  },
  "responses": {
    "SMTPNotEnabledError": {
      "description": ""
    },
    "acceptedResponse": {
      "description": "AcceptedResponse"
    },
    "adminCreateUserResponse": {
      "description": ""
    },
    "adminGetSettingsResponse": {
      "description": ""
    },
    "adminGetStatsResponse": {
      "description": ""
    },
    "adminGetUserAuthTokensResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "badRequestError": {
      "description": "BadRequestError is returned when the request is invalid and it cannot be processed."
    },
    "badRequestPublicError": {
      "description": "BadRequestPublicError is returned when the request is invalid and it cannot be processed."
    },
    "calculateDashboardDiffResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "type": "integer",
          "format": "uint8"
        }
      }
    },
    "cloudMigrationCreateTokenResponse": {
      "description": ""
    },
    "cloudMigrationDeleteTokenResponse": {
      "description": ""
    },
    "cloudMigrationGetTokenResponse": {
      "description": ""
    },
    "cloudMigrationRunListResponse": {
      "description": ""
    },
    "cloudMigrationRunResponse": {
      "description": ""
    },
    "cloudMigrationSessionListResponse": {
      "description": ""
    },
    "cloudMigrationSessionResponse": {
      "description": ""
    },
    "conflictError": {
      "description": "ConflictError"
    },
    "contentResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "type": "integer",
          "format": "uint8"
        }
      }
    },
    "createCorrelationResponse": {
      "description": ""
    },
    "createDashboardSnapshotResponse": {
      "description": ""
    },
    "createOrUpdateDatasourceResponse": {
      "description": ""
    },
    "createOrgResponse": {
      "description": ""
    },
    "createPlaylistResponse": {
      "description": ""
    },
    "createPublicDashboardResponse": {
      "description": ""
    },
    "createReportResponse": {
      "description": ""
    },
    "createRoleResponse": {
      "description": ""
    },
    "createServiceAccountResponse": {
      "description": ""
    },
    "createSnapshotResponse": {
      "description": ""
    },
    "createTeamResponse": {
      "description": ""
    },
    "createTokenResponse": {
      "description": ""
    },
    "dashboardResponse": {
      "description": ""
    },
    "dashboardVersionResponse": {
      "description": ""
    },
    "dashboardVersionsResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "deleteCorrelationResponse": {
      "description": ""
    },
    "deleteDashboardResponse": {
      "description": ""
    },
    "deleteDataSourceByNameResponse": {
      "description": ""
    },
    "deleteFolderResponse": {
      "description": ""
    },
    "devicesResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "devicesSearchResponse": {
      "description": ""
    },
    "folderResponse": {
      "description": ""
    },
    "forbiddenError": {
      "description": "ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource."
    },
    "forbiddenPublicError": {
      "description": "ForbiddenPublicError is returned if the user/token has insufficient permissions to access the requested resource."
    },
    "genericError": {
      "description": "A GenericError is the default error message that is generated.\nFor certain status codes there are more appropriate error structures."
    },
    "getAPIkeyResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "getAccessControlStatusResponse": {
      "description": ""
    },
    "getAllRolesResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "getAnnotationByIDResponse": {
      "description": ""
    },
    "getAnnotationTagsResponse": {
      "description": ""
    },
    "getAnnotationsResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "getCorrelationResponse": {
      "description": ""
    },
    "getCorrelationsBySourceUIDResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "getCorrelationsResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "getCurrentOrgResponse": {
      "description": ""
    },
    "getDashboardPermissionsListResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "getDashboardSnapshotResponse": {
      "description": ""
    },
    "getDashboardsTagsResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "getDataSourceIDResponse": {
      "description": ""
    },
    "getDataSourceResponse": {
      "description": ""
    },
    "getDataSourcesResponse": {
      "description": ""
    },
    "getFolderDescendantCountsResponse": {
      "description": ""
    },
    "getFolderPermissionListResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "getFoldersResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "getHomeDashboardResponse": {
      "description": ""
    },
    "getLibraryElementArrayResponse": {
      "description": ""
    },
    "getLibraryElementConnectionsResponse": {
      "description": ""
    },
    "getLibraryElementResponse": {
      "description": ""
    },
    "getLibraryElementsResponse": {
      "description": ""
    },
    "getLicenseTokenResponse": {
      "description": ""
    },
    "getOrgByIDResponse": {
      "description": ""
    },
    "getOrgByNameResponse": {
      "description": ""
    },
    "getOrgUsersForCurrentOrgLookupResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "getOrgUsersForCurrentOrgResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "getOrgUsersResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "getPendingOrgInvitesResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "getPlaylistDashboardsResponse": {
      "description": ""
    },
    "getPlaylistItemsResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "getPlaylistResponse": {
      "description": ""
    },
    "getPreferencesResponse": {
      "description": ""
    },
    "getPublicAnnotationsResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "getPublicDashboardResponse": {
      "description": ""
    },
    "getQueryHistoryDeleteQueryResponse": {
      "description": ""
    },
    "getQueryHistoryResponse": {
      "description": ""
    },
    "getQueryHistorySearchResponse": {
      "description": ""
    },
    "getQuotaResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "getReportResponse": {
      "description": ""
    },
    "getReportSettingsResponse": {
      "description": ""
    },
    "getReportsResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "getResourcePermissionsResponse": {
      "description": "",
      "schema": {}
    },
    "getRoleAssignmentsResponse": {
      "description": ""
    },
    "getRoleResponse": {
      "description": ""
    },
    "getSSOSettingsResponse": {
      "description": ""
    },
    "getSharingOptionsResponse": {
      "description": ""
    },
    "getSignedInUserOrgListResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "getSignedInUserTeamListResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "getSnapshotResponse": {
      "description": ""
    },
    "getStatusResponse": {
      "description": ""
    },
    "getSyncStatusResponse": {
      "description": ""
    },
    "getTeamByIDResponse": {
      "description": ""
    },
    "getTeamGroupsApiResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "getTeamMembersResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "getUserAuthTokensResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "getUserOrgListResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "getUserTeamsResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "helpFlagResponse": {
      "description": ""
    },
    "importDashboardResponse": {
      "description": ""
    },
    "internalServerError": {
      "description": "InternalServerError is a general error indicating something went wrong internally."
    },
    "internalServerPublicError": {
      "description": "InternalServerPublicError is a general error indicating something went wrong internally."
    },
    "jwksResponse": {
      "description": ""
    },
    "listBuiltinRolesResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "additionalProperties": {}
      }
    },
    "listPublicDashboardsResponse": {
      "description": ""
    },
    "listRecordingRulesResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "listRolesResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "listSSOSettingsResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "listSortOptionsResponse": {
      "description": ""
    },
    "listTeamsRolesResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "additionalProperties": {}
      }
    },
    "listTokensResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "listUsersRolesResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "additionalProperties": {}
      }
    },
    "noContentResponse": {
      "description": ""
    },
    "notFoundError": {
      "description": "NotFoundError is returned when the requested resource was not found."
    },
    "notFoundPublicError": {
      "description": "NotFoundPublicError is returned when the requested resource was not found."
    },
    "okResponse": {
      "description": "An OKResponse is returned if the request was successful."
    },
    "postAPIkeyResponse": {
      "description": ""
    },
    "postAnnotationResponse": {
      "description": ""
    },
    "postDashboardResponse": {
      "description": ""
    },
    "postRenewLicenseTokenResponse": {
      "description": ""
    },
    "preconditionFailedError": {
      "description": "PreconditionFailedError"
    },
    "publicErrorResponse": {
      "description": ""
    },
    "queryMetricsWithExpressionsRespons": {
      "description": ""
    },
    "queryPublicDashboardResponse": {
      "description": ""
    },
    "recordingRuleResponse": {
      "description": ""
    },
    "recordingRuleWriteTargetResponse": {
      "description": ""
    },
    "refreshLicenseStatsResponse": {
      "description": ""
    },
    "resourcePermissionsDescription": {
      "description": ""
    },
    "retrieveServiceAccountResponse": {
      "description": ""
    },
    "searchDashboardSnapshotsResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "searchOrgServiceAccountsWithPagingResponse": {
      "description": ""
    },
    "searchOrgUsersResponse": {
      "description": ""
    },
    "searchOrgsResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "searchPlaylistsResponse": {
      "description": ""
    },
    "searchResponse": {
      "description": ""
    },
    "searchResultResponse": {
      "description": ""
    },
    "searchTeamsResponse": {
      "description": ""
    },
    "searchUsersResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "searchUsersWithPagingResponse": {
      "description": ""
    },
    "setRoleAssignmentsResponse": {
      "description": ""
    },
    "snapshotListResponse": {
      "description": ""
    },
    "unauthorisedError": {
      "description": "UnauthorizedError is returned when the request is not authenticated."
    },
    "unauthorisedPublicError": {
      "description": "UnauthorisedPublicError is returned when the request is not authenticated."
    },
    "unprocessableEntityError": {
      "description": "UnprocessableEntityError"
    },
    "updateCorrelationResponse": {
      "description": ""
    },
    "updatePlaylistResponse": {
      "description": ""
    },
    "updatePublicDashboardResponse": {
      "description": ""
    },
    "updateServiceAccountResponse": {
      "description": ""
    },
    "userResponse": {
      "description": ""
    },
    "viewPublicDashboardResponse": {
      "description": ""
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "basic": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basic": []
    },
    {
      "api_key": []
    }
  ],
  "tags": [
    {
      "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled, for some endpoints you would need to have relevant permissions. Refer to specific resources to understand what permissions are required.",
      "name": "datasources"
    },
    {
      "description": "Folders are identified by the identifier (id) and the unique identifier (uid).\nThe identifier (id) of a folder is an auto-incrementing numeric value and is only unique per Grafana install.\nThe unique identifier (uid) of a folder can be used for uniquely identify folders between multiple Grafana installs. It’s automatically generated if not provided when creating a folder. The uid allows having consistent URLs for accessing folders and when syncing folders between multiple Grafana installs. This means that changing the title of a folder will not break any bookmarked links to that folder.\nThe uid can have a maximum length of 40 characters.",
      "name": "folders"
    },
    {
      "description": "Permissions with `folderId=-1` are the default permissions for users with the Viewer and Editor roles. Permissions can be set for a user, a team or a role (Viewer or Editor). Permissions cannot be set for Admins - they always have access to everything.",
      "name": "folder_permissions"
    },
    {
      "description": "The Admin HTTP API does not currently work with an API Token. API Tokens are currently only linked to an organization and an organization role. They cannot be given the permission of server admin, only users can be given that permission. So in order to use these API calls you will have to use Basic Auth and the Grafana user must have the Grafana Admin permission. (The default admin user is called admin and has permission to use this API.)",
      "name": "admin"
    },
    {
      "description": "You can use the Alerting API to get information about legacy dashboard alerts and their states but this API cannot be used to modify the alert. To create new alerts or modify them you need to update the dashboard JSON that contains the alerts.\nThis topic is relevant for the legacy dashboard alerts only.\nYou can find Grafana 8 alerts API specification details [here](https://editor.swagger.io/?url=https://raw.githubusercontent.com/grafana/grafana/main/pkg/services/ngalert/api/tooling/post.json).",
      "name": "legacy_alerts"
    },
    {
      "description": "The identifier (id) of a notification channel is an auto-incrementing numeric value and is only unique per Grafana install.\nThe unique identifier (uid) of a notification channel can be used for uniquely identify a notification channel between multiple Grafana installs. It’s automatically generated if not provided when creating a notification channel. The uid allows having consistent URLs for accessing notification channels and when syncing notification channels between multiple Grafana installations, refer to alert notification channel provisioning.\nThe uid can have a maximum length of 40 characters.",
      "name": "legacy_alerts_notification_channels"
    },
    {
      "description": "Grafana Annotations feature released in Grafana 4.6. Annotations are saved in the Grafana database (sqlite, mysql or postgres). Annotations can be organization annotations that can be shown on any dashboard by configuring an annotation data source - they are filtered by tags. Or they can be tied to a panel on a dashboard and are then only shown on that panel.",
      "name": "annotations"
    },
    {
      "description": "The identifier (ID) of a library element is an auto-incrementing numeric value that is unique per Grafana install.\nThe unique identifier (UID) of a library element uniquely identifies library elements between multiple Grafana installs. It’s automatically generated unless you specify it during library element creation. The UID provides consistent URLs for accessing library elements and when syncing library elements between multiple Grafana installs.\nThe maximum length of a UID is 40 characters.",
      "name": "library_elements"
    },
    {
      "description": "The identifier (ID) of a query in query history is an auto-incrementing numeric value that is unique per Grafana install.\nThe unique identifier (UID) of a query history uniquely identifies queries in query history between multiple Grafana installs. It’s automatically generated. The UID provides consistent URLs for accessing queries in query history.",
      "name": "query_history"
    },
    {
      "description": "The Admin Organizations HTTP API does not currently work with an API Token. API Tokens are currently only linked to an organization and an organization role. They cannot be given the permission of server admin, only users can be given that permission. So in order to use these API calls you will have to use Basic Auth and the Grafana user must have the Grafana Admin permission (The default admin user is called `admin` and has permission to use this API).",
      "name": "orgs"
    },
    {
      "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled, for some endpoints you would need to have relevant permissions. Refer to specific resources to understand what permissions are required.",
      "name": "org"
    },
    {
      "description": "This API can be used to create/update/delete Teams and to add/remove users to Teams. All actions require that the user has the Admin role for the organization.",
      "name": "teams"
    },
    {
      "description": "This API can be used to enable, disable, list, add and remove permissions for a data source.\nPermissions can be set for a user or a team. Permissions cannot be set for Admins - they always have access to everything.\nThis is only available in Grafana Enterprise\nIf you are running Grafana Enterprise and have Fine-grained access control enabled, for some endpoints you would need to have relevant permissions. Refer to specific resources to understand what permissions are required.",
      "name": "datasource_permissions"
    },
    {
      "description": "These are only available in Grafana Enterprise",
      "name": "enterprise"
    },
    {
      "description": "The API can be used to create, update, get and list roles, and create or remove built-in role assignments. To use the API, you would need to enable fine-grained access control.\nThis only available in Grafana Enterprise.\nThe API does not currently work with an API Token. So in order to use these API endpoints you will have to use Basic auth.",
      "name": "access_control"
    },
    {
      "description": "Licensing is only available in Grafana Enterprise. Read more about Grafana Enterprise.\nIf you are running Grafana Enterprise and have Fine-grained access control enabled, for some endpoints you would need to have relevant permissions. Refer to specific resources to understand what permissions are required.",
      "name": "licensing"
    },
    {
      "description": "This API allows you to interact programmatically with the Reporting feature.\nReporting is only available in Grafana Enterprise. Read more about Grafana Enterprise.\nIf you have Fine-grained access Control enabled, for some endpoints you would need to have relevant permissions. Refer to specific resources to understand what permissions are required.",
      "name": "reports"
    },
    {
      "description": "Grafana Alerting Alertmanager-compatible endpoints",
      "name": "alertmanager"
    },
    {
      "description": "Grafana Alerting endpoints for managing rules",
      "name": "ruler"
    },
    {
      "description": "Grafana Alerting testing endpoints",
      "name": "testing"
    },
    {
      "description": "Grafana Alerting Prometheus-compatible endpoints",
      "name": "prometheus"
    },
    {
      "description": "If you are running Grafana Enterprise, for some endpoints you'll need to have specific permissions. Refer to [Role-based access control permissions](https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/custom-role-actions-scopes/) for more information.",
      "name": "service_accounts"
    }
  ]
}