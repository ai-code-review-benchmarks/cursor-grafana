// Code generated by mockery v2.53.3. DO NOT EDIT.

package pullrequest

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCommentGenerator is an autogenerated mock type for the CommentGenerator type
type MockCommentGenerator struct {
	mock.Mock
}

type MockCommentGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommentGenerator) EXPECT() *MockCommentGenerator_Expecter {
	return &MockCommentGenerator_Expecter{mock: &_m.Mock}
}

// GenerateComment provides a mock function with given fields: ctx, info
func (_m *MockCommentGenerator) GenerateComment(ctx context.Context, info changeInfo) (string, error) {
	ret := _m.Called(ctx, info)

	if len(ret) == 0 {
		panic("no return value specified for GenerateComment")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, changeInfo) (string, error)); ok {
		return rf(ctx, info)
	}
	if rf, ok := ret.Get(0).(func(context.Context, changeInfo) string); ok {
		r0 = rf(ctx, info)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, changeInfo) error); ok {
		r1 = rf(ctx, info)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommentGenerator_GenerateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateComment'
type MockCommentGenerator_GenerateComment_Call struct {
	*mock.Call
}

// GenerateComment is a helper method to define mock.On call
//   - ctx context.Context
//   - info changeInfo
func (_e *MockCommentGenerator_Expecter) GenerateComment(ctx interface{}, info interface{}) *MockCommentGenerator_GenerateComment_Call {
	return &MockCommentGenerator_GenerateComment_Call{Call: _e.mock.On("GenerateComment", ctx, info)}
}

func (_c *MockCommentGenerator_GenerateComment_Call) Run(run func(ctx context.Context, info changeInfo)) *MockCommentGenerator_GenerateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(changeInfo))
	})
	return _c
}

func (_c *MockCommentGenerator_GenerateComment_Call) Return(_a0 string, _a1 error) *MockCommentGenerator_GenerateComment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommentGenerator_GenerateComment_Call) RunAndReturn(run func(context.Context, changeInfo) (string, error)) *MockCommentGenerator_GenerateComment_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareChanges provides a mock function with given fields: ctx, opts
func (_m *MockCommentGenerator) PrepareChanges(ctx context.Context, opts CommentOptions) (changeInfo, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for PrepareChanges")
	}

	var r0 changeInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, CommentOptions) (changeInfo, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, CommentOptions) changeInfo); ok {
		r0 = rf(ctx, opts)
	} else {
		r0 = ret.Get(0).(changeInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, CommentOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommentGenerator_PrepareChanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareChanges'
type MockCommentGenerator_PrepareChanges_Call struct {
	*mock.Call
}

// PrepareChanges is a helper method to define mock.On call
//   - ctx context.Context
//   - opts CommentOptions
func (_e *MockCommentGenerator_Expecter) PrepareChanges(ctx interface{}, opts interface{}) *MockCommentGenerator_PrepareChanges_Call {
	return &MockCommentGenerator_PrepareChanges_Call{Call: _e.mock.On("PrepareChanges", ctx, opts)}
}

func (_c *MockCommentGenerator_PrepareChanges_Call) Run(run func(ctx context.Context, opts CommentOptions)) *MockCommentGenerator_PrepareChanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CommentOptions))
	})
	return _c
}

func (_c *MockCommentGenerator_PrepareChanges_Call) Return(_a0 changeInfo, _a1 error) *MockCommentGenerator_PrepareChanges_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommentGenerator_PrepareChanges_Call) RunAndReturn(run func(context.Context, CommentOptions) (changeInfo, error)) *MockCommentGenerator_PrepareChanges_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommentGenerator creates a new instance of MockCommentGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommentGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommentGenerator {
	mock := &MockCommentGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
