// SPDX-License-Identifier: AGPL-3.0-only

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v0alpha1

// CommitInfoApplyConfiguration represents a declarative configuration of the CommitInfo type for use
// with apply.
type CommitInfoApplyConfiguration struct {
	SHA1     *string                     `json:"sha1,omitempty"`
	Added    []FileRefApplyConfiguration `json:"added,omitempty"`
	Modified []FileRefApplyConfiguration `json:"modified,omitempty"`
	Removed  []FileRefApplyConfiguration `json:"removed,omitempty"`
}

// CommitInfoApplyConfiguration constructs a declarative configuration of the CommitInfo type for use with
// apply.
func CommitInfo() *CommitInfoApplyConfiguration {
	return &CommitInfoApplyConfiguration{}
}

// WithSHA1 sets the SHA1 field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SHA1 field is set to the value of the last call.
func (b *CommitInfoApplyConfiguration) WithSHA1(value string) *CommitInfoApplyConfiguration {
	b.SHA1 = &value
	return b
}

// WithAdded adds the given value to the Added field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Added field.
func (b *CommitInfoApplyConfiguration) WithAdded(values ...*FileRefApplyConfiguration) *CommitInfoApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithAdded")
		}
		b.Added = append(b.Added, *values[i])
	}
	return b
}

// WithModified adds the given value to the Modified field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Modified field.
func (b *CommitInfoApplyConfiguration) WithModified(values ...*FileRefApplyConfiguration) *CommitInfoApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithModified")
		}
		b.Modified = append(b.Modified, *values[i])
	}
	return b
}

// WithRemoved adds the given value to the Removed field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Removed field.
func (b *CommitInfoApplyConfiguration) WithRemoved(values ...*FileRefApplyConfiguration) *CommitInfoApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithRemoved")
		}
		b.Removed = append(b.Removed, *values[i])
	}
	return b
}
