// SPDX-License-Identifier: AGPL-3.0-only

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v0alpha1

import (
	v0alpha1 "github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1"
)

// JobSpecApplyConfiguration represents a declarative configuration of the JobSpec type for use
// with apply.
type JobSpecApplyConfiguration struct {
	Action  *v0alpha1.JobAction            `json:"action,omitempty"`
	Hash    *string                        `json:"hash,omitempty"`
	PR      *int                           `json:"pr,omitempty"`
	URL     *string                        `json:"url,omitempty"`
	Ref     *string                        `json:"ref,omitempty"`
	Commits []CommitInfoApplyConfiguration `json:"commits,omitempty"`
}

// JobSpecApplyConfiguration constructs a declarative configuration of the JobSpec type for use with
// apply.
func JobSpec() *JobSpecApplyConfiguration {
	return &JobSpecApplyConfiguration{}
}

// WithAction sets the Action field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Action field is set to the value of the last call.
func (b *JobSpecApplyConfiguration) WithAction(value v0alpha1.JobAction) *JobSpecApplyConfiguration {
	b.Action = &value
	return b
}

// WithHash sets the Hash field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Hash field is set to the value of the last call.
func (b *JobSpecApplyConfiguration) WithHash(value string) *JobSpecApplyConfiguration {
	b.Hash = &value
	return b
}

// WithPR sets the PR field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PR field is set to the value of the last call.
func (b *JobSpecApplyConfiguration) WithPR(value int) *JobSpecApplyConfiguration {
	b.PR = &value
	return b
}

// WithURL sets the URL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the URL field is set to the value of the last call.
func (b *JobSpecApplyConfiguration) WithURL(value string) *JobSpecApplyConfiguration {
	b.URL = &value
	return b
}

// WithRef sets the Ref field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Ref field is set to the value of the last call.
func (b *JobSpecApplyConfiguration) WithRef(value string) *JobSpecApplyConfiguration {
	b.Ref = &value
	return b
}

// WithCommits adds the given value to the Commits field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Commits field.
func (b *JobSpecApplyConfiguration) WithCommits(values ...*CommitInfoApplyConfiguration) *JobSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithCommits")
		}
		b.Commits = append(b.Commits, *values[i])
	}
	return b
}
